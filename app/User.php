<?php

namespace App;

use Illuminate\Database\Eloquent\Builder;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;
use Mockery\Exception;

class User extends Authenticatable
{
    use Notifiable;

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = [
        'name',
        'email',
        'password',
        'client_secret',
        'client_key',
        'max_attempt',
        'is_active'
    ];

    /**
     * The attributes that should be hidden for arrays.
     *
     * @var array
     */
    protected $hidden = [
        'password',
        'remember_token',
        'client_secret',
        'client_key',
        'max_attempt'
    ];

    /**
     * @return int
     */
    public function getMaxAttempt()
    {
        return $this->max_attempt;
    }

    /**
     * @return int
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * @return string
     */
    public function getEmail()
    {
        return $this->email;
    }

    /**
     * @return string
     */
    public function getPassword()
    {
        return $this->password;
    }

    /**
     * @return string
     */
    public function getClientSecret()
    {
        return $this->client_secret;
    }

    /**
     * @return string
     */
    public function getClientKey()
    {
        return $this->client_key;
    }

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
        static::saving(function ($model) {
            $model->setClientKey();
            $model->setClientSecret();
        });
    }

    public function setClientKey()
    {
        if ( ! $this->getClientKey()) {
            for ($i = 0; $i <= $this->getMaxRetry(); $i++) {
                $clientKey = $this->generateClientKey();
                if (self::whereClientKey($clientKey)->count() === 0) {
                    $this->client_key = $clientKey;
                    break;
                }
            }
            if ( ! $this->getClientKey()) {
                throw new Exception();
            }
        }
    }

    public function setClientSecret()
    {
        if ( ! $this->getClientSecret()) {
            for ($i = 0; $i <= $this->getMaxRetry(); $i++) {
                $clientSecret = $this->generateClientSecret();
                if (self::whereClientSecret($clientSecret)->count() === 0) {
                    $this->client_secret = $clientSecret;
                    break;
                }
            }
            if ( ! $this->getClientSecret()) {
                throw new Exception();
            }
        }
    }

    private function getMaxRetry()
    {
        return 100;
    }

    /**
     * @return string
     */
    private function generateClientKey()
    {
        $prefix = 'AVL-WAF-CK';
        $length = 30;
        $rand = function ($min = 0, $max = 9) {
            return mt_rand($min, $max);
        };
        $key = "{$rand(1)}";
        for ($i = 0; $i < $length; $i++) {
            $key .= "{$rand()}";
        }

        return $prefix . $key;
    }

    /**
     * @return string
     */
    private function generateClientSecret()
    {
        $prefix = 'AVL-WAF-SC';
        $length = 30;
        $rand = function ($min = 0, $max = 9) {
            return mt_rand($min, $max);
        };
        $secret = "{$rand(1)}";
        for ($i = 0; $i < $length; $i++) {
            $secret .= "{$rand()}";
        }

        return $prefix . $secret;
    }

    /**
     * @param \Illuminate\Database\Eloquent\Builder $builder
     * @param string                                $clientKey
     * @return \Illuminate\Database\Eloquent\Builder
     */
    public function scopeWhereClientKey(Builder $builder, $clientKey)
    {
        return $builder->where('client_key', '=', $clientKey);
    }

    /**
     * @param \Illuminate\Database\Eloquent\Builder $builder
     * @param string                                $clientSecret
     * @return \Illuminate\Database\Eloquent\Builder
     */
    public function scopeWhereClientSecret(Builder $builder, $clientSecret)
    {
        return $builder->where('client_secret', '=', $clientSecret);
    }
}
